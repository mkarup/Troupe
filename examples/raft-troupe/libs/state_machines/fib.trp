datatype Atoms = WAIT|SUS|DONE

(* EXPORT START *)

(* Calculates the nth Fibonacci number*)
fun fib_raft cb n  =
    (* O(n) recursive solution*)
    let fun loop cb n a b = case n of
    (* Send result of recursive loop to cb *)
    1 => ([(cb, b)], WAIT, fib_input)
    (* Add suspended states to ensure computation when doing recursion*)
    | n => 
        ([], SUS, fn () => 
            let val n = n - 1
            in ([], SUS, fn () => loop cb n b (a + b)) end)

    in if n <= 1 then ([(cb, n)], WAIT, fib_input)
        else loop cb n 0 1
end

and fib_input x = case x of 
(* Compute the nth fibonacci number if input matches *)
(callback, n) => fib_raft callback n
(* Ignores otherwise*)
| _ => ([], WAIT, fib_input)

(* EXPORT END *)
