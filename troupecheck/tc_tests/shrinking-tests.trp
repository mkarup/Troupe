(* 
    This file is purely for testing different aspects of how well TroupeCheck handles shrinking.
    If any changes are made to the shrinking part of the TC library, it is a good idea to run all of these, and
    check that the shrinks look as one would expect. 
    They can be run with the command 'make tc-shrink-tests' from the troupecheck folder. 
*)
import troupecheck
import lists
(*
--------------------------------
UTILITY FUNCTIONS FOR 
BOOLEAN STATEMENTS.

-------------------------------- 
*)
let fun filter_less ([], _) = []
    | filter_less ((x::xs), p) = 
        if x < p then append [x] (filter_less (xs, p)) else (filter_less (xs, p))

    fun filter_greater ([], _) = []
    | filter_greater ((x::xs), p) = 
        if x > p  then append [x] (filter_greater (xs, p)) else (filter_greater (xs, p))


    fun my_quicksort [] = []
    | my_quicksort (x::xs) =
        let val smaller = my_quicksort(filter_less(xs, x))
            val greater = my_quicksort(filter_greater(xs, x)) in 
        append (append smaller [x]) (greater) end 
    
    fun filter_less2 ([], _) = []
    | filter_less2 ((x::xs), p) = 
        if ((x <= p) andalso (x<>0)) orelse (p = 0) then append [x] (filter_less2 (xs, p)) else (filter_less2 (xs, p))

    fun filter_greater2 ([], _) = []
    | filter_greater2 ((x::xs), p) = 
        if ((x > p) andalso (p<>0)) orelse (x = 0)  then append [x] (filter_greater2 (xs, p)) else (filter_greater2 (xs, p))

    fun my_quicksort2 [] = []
    | my_quicksort2 (x::xs) =
        let val smaller = my_quicksort2(filter_less2(xs, x))
            val greater = my_quicksort2(filter_greater2(xs, x)) in 
        append (append smaller [x]) (greater) end 
    
    fun filter_less3 ([], _) = []
    | filter_less3((x::xs), p) = 
        if (x < p)andalso (x<>15) then append [x] (filter_less3 (xs, p)) else (filter_less3 (xs, p))

    fun filter_greater3 ([], _) = []
    | filter_greater3 ((x::xs), p) = 
        if (x >= p) andalso (x<>15) then append [x] (filter_greater3 (xs, p)) else (filter_greater3 (xs, p))

    fun my_quicksort3 [] = []
    | my_quicksort3 (x::xs) =
        let val smaller = my_quicksort3(filter_less3(xs, x))
            val greater = my_quicksort3(filter_greater3(xs, x)) in 
        append (append smaller [x]) (greater) end 





    fun bad_insert xs x = 
        if length xs < 10 then append [x] xs else
        xs

    fun bad_half n = 
        if n > 10 then n else n/2
    
    fun ordered [] = true
    | ordered (x::[]) = true 
    | ordered (x::y::ys) = 
        if x <= y then ordered (y::ys) else false 
(* 
--------------------------------
BOOLEAN STATEMENTS FOR TESTING.

-------------------------------- 
*)
    fun shrink_test x y z w = x+y+z+w < 100

    fun test_bad_insert xs x =
        length (bad_insert xs x) = (length xs) + 1 
    
    fun test_bad_half n = 
        n > (bad_half n)
    
    fun record_shrink_test r = 
         r.theInteger < 50

    fun append_always_longer s1 s2 = 
        let fun string_to_list s = 
            let fun aux "" acc = acc 
                | aux s acc = 
                    let val x = substring (s, 0, 1)
                        val xs = substring (s, 1, 1/0) 
                    in aux xs (append acc [x]) 
                    end 
            in aux s [] 
            end
        fun string_length s = 
            length (string_to_list s)
        in string_length s1 < string_length (s1 ^ s2)
        end
    
    fun my_sort_keep_length xs = 
        length xs = length (my_quicksort(xs))

    fun mysort2_is_ordered xs = 
        ordered (my_quicksort2 xs)

    fun mysort3_keep_length xs = 
        length xs = length (my_quicksort3(xs))
    
    fun tuple_shrink_test (number, string) = 
        number < 50

(* 
--------------------------------
PROPERTIES TO RUN WITH TROUPECHECK.

-------------------------------- 
*)
    fun prop_append_always_longer() = for_all ([string(), string()], append_always_longer)
    fun prop_bad_insert() = for_all ([list(integer()), integer()], test_bad_insert)
    fun prop_bad_half() = for_all ([integer()], (test_bad_half, (fn x => x >= 15)))
    fun prop_record_shrink() = for_all ([(record (["theInteger", "theString"], [integer(), string()]))], record_shrink_test)
    fun prop_shrink_test() = for_all ([integer(), integer(), integer(), integer()], shrink_test)
    fun prop_keep_length() = for_all ([list(integer())], my_sort_keep_length)
    fun prop_mysort2_ordered() = for_all ([list(integer())], mysort2_is_ordered)
    fun prop_mysort3_keep_length() = for_all ([list(integer())], mysort3_keep_length)
    fun prop_tuple_shrink() = for_all ([tuple([integer(), string()])], tuple_shrink_test)
    val prop_list = [prop_append_always_longer, prop_bad_insert, prop_bad_half, prop_record_shrink, 
                    prop_shrink_test, prop_keep_length, prop_mysort2_ordered, prop_mysort3_keep_length, prop_tuple_shrink]
in troupecheck prop_list authority
end 